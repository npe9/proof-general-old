-*- mode:outline -*-

$Id$

* Priorities
============
A* (SUPERSONIC URGENT)  to be fixed yesterday.
A (URGENT) to be fixed immediately for pre-release 
B (High)   to be fixed before release (Version 2.0)
C          would be nice to fix before release of 2.0; but not crucial
D (Medium) desirable to fix at some point
X (Low)    probably not worth wasting time on

* This is a list of things which need doing in the generic interface
====================================================================

C  Remove "FIXME notes" which are just notes I've put in about old
   code in case something breaks   (da, 30mins).

C  Check on all FIXME notes.

A* Fixup for non-script buffer locking:

    proof-locked-end called from wrong buffer when error message
    is output.

    proof-restart-script is now broken (2h da)

A* Fixup for clean byte compile now that proof.el has been split.
   (30min da)

A* Fixup multiple files -- needs debugging.

   1. mark atomic makes some assumption about non-comment commands in
      script buffers
      (partly fixed)
   2. Add save-some-buffers or similar to try to make sure that a
      modified buffer is saved before it can be read to the prover.  
      If a buffer is put onto the proof-included-files-list when it is
      modified, we should warn the user about possible inconsistency.  

   (1hr tms)

B Improve web pages after suggestions in doc/notes.txt
  (da, 1.5hrs)

C byte-compilation: check that byte compilation (and compiled code!)
  works for both varieties of Emacs.  Add instructions to INSTALL on 
  how to byte compile.  (1hr)

C Remove .gif, .jpg, .xpm, .xbm files from the CVS repository.  Add 
  .cvsignore's for them instead.  Disadvantage: developers will need
  to have the Gimp installed to build them via 'make images'
  (or copy them from the latest download).   (da, 1hr)

C proof-issue-goal should refuse to work when a proof is in progress.
  Similarly proof-issue-save should refuse to work when a proof
  hasn't been completed! Algorithm: Search the last goal and check
  length of span.  (45min)

C Bug in proof-retract-until-point when called twice in succession:
  calls backward-char at beginning of buffer.  (Should say no
  locked region, or "nothing to retract").  Problems is that
  there is a proof-locked-end, but it's at (point-min). (30min)

C proof-find-next-terminator doesn't work properly:

     first;second;third
           ^
     Invoking proof-find-next-terminator in cursor position (^) should 
     move point to "t". Currently, it doesn't do anything. This is a
     bug. Perhaps just use new implementation of
     proof-assert-until-point (30min)

B Add proof-rsh-command and note in documentation about how to
  use widely-advertised "remote shell" feature.  (1hr tms)

B Add proof-quit-command: some provers may like a quit command to be
  sent to the shell, not just EOF !  (see proof-stop-shell).
  Also reconcile proof-restart-script and proof-stop-shell, see
  comments in code. (1h da)

D Multiple files: handle failures in
  reading ancestors.

C Clean up proof-assert-until-point behaviour.  Discussion results:
    1.  At the moment we get an odd error if it is run in
    the locked region.    This is a bug.  Should behave same
    as proof-assert-next-command in this case (simpler) or
    give better error message.

    2.  At or before first character of proof command, "nothing to do"
    error message.  This is a bug.  Should behave same
    as proof-assert-next-command in this case.

    [1,2 have been "fixed" by rebinding C-c RET to 
     proof-assert-next-command for now, eventually 
     this may form a new version of proof-assert-until-point]

    3.  Movement and possible insertion of spaces/newlines for 
    when new commands are added to the buffer needs careful
    thought! (1h)

B Implement more generic mechanism for large undos (4h tms)

    COQ: C-c u inside a Section should reset the whole section, then
         redo defns 

    LEGO: consider Discharge; perhaps unrol to the beginning of the
          module?

A replace (current-buffer) by proof-shell-buffer/proof-script-buffer
  where ever possible (30 min tms)

A New buffer model (4h tms):

    1. Script buffers
    2. Response buffer
    3. (optionally part of response buffer) goals buffer
    4. (hidden) process buffer
    5. Minibuffer for additionally sending information to the process 

A Revise ProofGeneral.texi and publish LaTeX version as an LFCS
  Technical Report (2 days; da + tms)

C Provide a sensible default frame/buffer layout (4h)

C A less drastic version of proof-restart-script would be useful:
  one that doesn't involve killing off the proof assistant process
  and restarting that -- it can take ages! 
  
  We want two different modes of restarting:

     1. Restart all: clear all context and kill proof process.
     2. Restart some: clear context, do some retraction/kill goals
        in proof process.

  Add kill buffer hook to script buffer which does restart some
  in case it's the active buffer.
  (da, 20mins)
  
C Improve proof-goal-command and proof-save-command:
  `proof-goal-command' should be more flexible and support a
  placeholder for the name and the actual goal. In LEGO, we have
    Goal foo : absurd;
    ...
    Save foo;
  Perhaps functions at the generic level to make suitable
  values for the hook, e.g.,

     (setq proof-goal-command  (proof-prompt-named-goal "Goal %s :" "%s;"))

C Cleanup handling of proof-terminal-string.  At the moment some
  commands need to have the terminal string, some don't.
  da: I suggest removing proof-terminal-string altogether and
  adding back the semi-colons or fullstops at the specific level.
  It's not a big deal and would support other provers which
  may use a mixture of terminators, or no terminators at all.

C Investigate and improve indentation/font-locking code.
  At the moment editing .ML files in Isabelle Proof General is
  *very* slow.  Moreover the indentation is screwy.  Also
  seems screwy in LEGO/Coq PG.  (da, 2hr)

X toolbar icons: Automatically generate reduced and
  pressed/greyed-out versions from gimp xcf files.  Keep the
  xcf files under CVS rather than xpm files.  (2h, da)

C Better support for adding a new prover: give error messages which
  hint at what variable to set (see proof-issue-goal for example).

C Functions for next,previous input a la shell mode, but in proof
  script buffer (3h, da).

X Read-only mode of extents sometimes gets in the way: for example,
  if file changes on disk, can't reload it via usual functions.
  Can this be improved?  Always have to retract first, and that
  always leaves stuff around.

C User-level functions: 
  1. add new version of undo-until-point which behaves analogously to 
  proof-assert-next-command.
  2. make version of proof-restart-script which will start or
  restart the proof assistant as appropriate.  (It's handy to have
  a direct function to start the proof assistant).
  (1hr, da)

C Write test schedule for things to try out with a new instantiation
  of Proof General.

C Add skeleton instantiation files for a dummy prover "myassistant" to
  make it easier to add support for new assistants -- looking at
  any of the existing modes is confusing because of the
  prover-specific stuff.  Ideally it should work for one of
  the default provers as an impoverished example mode.
  (2h, da will do for Isabelle)

D Code in proof.el assumes all characters with top bit set are special
  instructions to Emacs.  This is rather arrogant, and precludes proof
  systems which utilize 8-bit character sets!  Needs repair.  (3h)

D Add support to proof.el for *not* setting variables for
  commands which aren't supported by a prover.  For example,
  in Isabelle there is no such thing as killing a goal.
  For the minimum set of variables to cover, see FIXME's in isa.el
  (da, 1.5hrs)						   
				    
D Outsource script management features from proof.el to
  proof-script.el 		(1h)

C Fixup sources to follow Elisp conventions better.
  1. The first line of documentation of functions and
     variables should be a whole sentence.  Subsequent lines should
     *not* be indented.  See output of hyper-apropos and
     poor formatting of current comments.   (1hr)
  2. Replace defvar's by defconst's where appropriate.
     Introduce new defconsts.
  3. Check on use of "*" in docstrings.  Should be used for
     variables which are user-level options, only.
  4. Upper case in docstrings is reserved for the name
     of a function's arguments, usually.

D Implement proof-find-previous-terminator and bind it to C-c C-a
  (45min)

C file handling could be more robust; perhaps one should always cd to
  the directory corresponding to the script buffer (currently only
  done for the buffer which starts up the proof system). This could be 
  achieved with a hook which is not set by default. [Remember to add
  user documentation] (30min tms)

C Reengineer *-count-undos and *-find-and-forget at generic level
  (3h)

D Allow bib-cite style clicking on Load/Import commands to go to file.

D support font-lock in goal buffer

C Unify toolbar and menu functions.

D Remove duplication of variables e.g., proof-prog-name and
  lego-prog-name for Coq and Lego. (1h)

C Make completion more generic. For Isabelle and Lego, we can build a
  completion table by querying the process, which is better than
  messing with tags.

X proof-site (da): I think it would be nice to change the architecture
  to make customization for new provers much easier.
  The standard use of 'define-derived-mode' could be invoked
  automatically in proof-site, and we could easily get away from the 
  kludge of proof-config-done and friends.
  (Compare this to the way font-lock works automatically for XEmacs
  when the right variable name is set, but for FSF Emacs you have
  to write something special).
  The objection to doing this is based on the idea that we should use
  an object-like inheritance mechanism to define the new modes.
  But if this is forgone, it might even be possible to add
  support for new assistants entirely via the customize mechanism,
  without any knowledge of elisp apart from regular expressions!

X Support a history of proof commands, with a "redo" command to
  redo undo-to-point or sequences of toolbar undo's.

X Support for x-symbols package.
  Provers with sophisticated/configurable syntax should tell Emacs
  about their syntax somehow, rather than trying to duplicate
  specifications inside Emacs.

X Comment support is not very generic: we don't support end-of-line
  terminated comments.  Is there any case where this might be
  worthwhile?  (2h to add it).

X Splash screen: Add fancy text logo to it.  Centre the display
  prettily.

X Write a Makefile for the distribution.  It can do things like
  install the info file properly.  The work is at the moment done
  in the RPM spec file instead.

X Make process handling smarter: because Emacs is single-threaded,
  no process output can be dealt with when we are running some
  command.  This means that it would be safe to extend the 
  red region, by putting more commands on the queue.  Also it would
  be safe to implement a clever undo command which worked on the
  red region: if there are commands waiting to be processed, we
  could remove them from the queue.  If there are no commands waiting,
  we have to wait until something becomes blue to undo it by sending
  a command to the process.

X Ideas for efficiency improvements.  Rather than repeatedly
  re-parsing the buffer, we could parse the whole buffer *once*
  and make adjustments after edits, like font-lock.  We could
  make an extent for every command, and set it to "blue", "red"
  or "clear" as appropriate.  (This would allow proofs to be
  sent out-of-order to the proof process too, although perhaps
  that's not so nice).
  The function proof-segment-up-to could be made to cache its
  result.

X We need to go over to piped communication rather than ptys to fix
  the (Solaris) ^G bug. In this circumstance there's a bug in the
  eager annotation code. Document this problem so that it can be
  tested for future versions. [Currently the problem is documented in
  Email messages sent to lego]


* Proof-by-Pointing
===================

B Change proof by pointing (pbp) stuff into proofstate buffer stuff.
  (1h tms)

C Fixing up errors caused by pbp-generated commands; currently, script
  management unwisely assumes that pbp commands cannot fail (2h)

B Rename pbp-mode to response-mode or goals-mode (which doesn't
  support any actual proof-by-pointing) (30min) 

B Outsource actual pbp/goals functionality (30min tmd)
  (separate pbp annotations from other annotations).
  Make a file proof-goals.el.

X pbp code doesn't quite accord with the tech report; in particular it
  decodes annotations eagerly. Lazily would be faster, and it's what
  the tech report claims
  --- djs: probably not much faster, actually.


* Here are things to be done to Lego mode
=========================================

C fix Pbp implementation (10h)

B `lego-get-path' assumes that LEGOPATH has been set in the
  environment. This is not likely to be the case with the current lego 
  shell script. Proof General needs to query the LEGO process as part
  of `lego-process-config' e.g. by
  sending (a yet to be implemented command) LEGOPATH. The output could 
  be analysed with the help of a LEGO specific extension of
  `proof-shell-process-urgent-message'. (1h tms)

B Equiv, Next,... aren't handled properly, because LEGO does not
  refresh the proof state. Perhaps it would be easiest to get LEGO to
  output more information in proof script mode (2h)

B release new version of the LEGO proof engine (4h tms)

X Mechanism to save object file

C Improve legotags. I cannot handle lists e.g., with 	

    [x,y:nat];

  it only tags x but not y. [The same problem exists for coqtags]

* Here are things to be done to Coq mode
========================================

D set proof-commands-regexp to support indentation for commands
						    (10min hhg)

D Add Patrick Loiseleur's commands to search for vernac or ml files.

X Sections and files are handled incorrectly.

B Lifted nested lemmas respond incorrectly to C-c u: Coq gets sent the
  correct command if I undo up to the lower lemma, but the buffer
  undoes to the upper lemma.  I.e., if I start Lemma x, then prove
  Lemma y, then finish x, and undo lemma x, then lemma y gets undone
  in the buffer as well. (45min hhg)
  [ This seems to have corrected itself... hhg ]

D Proof-by-Pointing (10h hhg)

B Add coq-add-tactic with a tactic name, which adds that tactic to the 
  undoable tactics and to the font-lock. (2h hhg)

C Improve coqtags. I cannot handle lists e.g., with 	

	Parameter x,y:nat

  it only tags x but not y. [The same problem exists for legotags]

* Here are things to be done to Isabelle Mode
=============================================

A* Fix bug in undo, maybe related to below?

A* Fix output handling routines to not display parts of messages.
   Intermittent problems parsing output.  Seems to depend on
   what has been run before.  E.g. first time starting process
   might not display goal.  Try to find repeatable case.

A* Add annotations to prompt and output using Isabelle's ml_prompts.

A* Make theory files go blue.

D Implement completion for Isabelle using tables generated by
  the running process.

D Add useful specific commands for Isabelle.  Many could
  be added.  Would be better to merge in Isamode's menus.
  (probably a week's work to bring together Isamode and proof.el,
   making some of Isamode generic)

D Add ability to choose logic.  Maybe not necessary: can use default
  set in Isabelle settings nowadays, in the premise that most people
  stick to a particular logic?   But then no support for loading
  user-saved databases.
  (ponder this)

X Write perl scripts to generate TAGS file for ML and thy files.
  (6h, I've completely forgotten perl), or better:

X Manage multiple proofs (markers in possibly different buffers)
	 
X Add Isabelle logo to splash screen.  (30 mins)

* FSF Emacs
===========

B According to the documentation of font-lock for Emacs 20.2, it
  should suffice to set (add-hook 'lego-mode-hook 'turn-on-font-lock)
  but this doesn't seem to work. Perhaps define-derived-mode doesn't
  set up lego-mode correctly? (1h tms)


* Release
=========

B add links *from* Coq, Lego & Isabelle Web pages (da, tms 10 min)

B add instructions for byte compilation (da 20 min)
