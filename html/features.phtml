<!-- <h2><a name="why">Why should I use Proof General?</a></h2> -->

<p>
It doesn't matter if you're an Emacs militant or a pacifist!
</p>

<p>
Proof General is designed to be useful for novices and expert users alike.
<br>
It will be useful to you if you use a proof assistant, and
you'd like an interface with the following features:
<a href="#script">script management</a>,
<a href="#multiple">multiple file scripting</a>,
<a href="#pbp">proof by pointing</a>,
<a href="#toolbar">toolbar and menus</a>,
<a href="#fontlock">syntax highlighting</a>,
<a href="#xsymbol">real symbols</a>,
<a href="#funcmenu">definitions menu</a>,
<a href="#tags">tags</a>,
and finally,
<a href="#generic">adaptability</a>.
<br>
Are you convinced yet?
If not, read on&#8230;
</p>
</hrule>
<dl>
  <a name="script"><?php dt("Script management.") ?></a>
  <dd>
  A <em>proof script</em> is a sequence of commands sent to
  a proof assistant to construct a proof, usually stored in
  a file.  <em>Script management</em> connects the editing of a 
  proof script directly to an interactive proof process,
  maintaining consistency between the edit buffer
  and the state of the proof assistant.
  <p>
  Proof General colours a proof script to show the state in the proof
  assistant.  Parts of a proof script that have been processed are
  displayed in blue and are "locked" -- they cannot be edited.  Parts
  of the script currently being processed by the proof assistant are
  shown in red.  Commands are provided to process new parts of the
  buffer, or undo already processed parts.
  </p>
  <p>
  Take a look at this
  <a href="screenshot.phtml">screenshot</a>
  of Proof General to see script managament in action.
  </p>
  </dd>
  <a name="multiple"><?php dt("Multiple files.") ?></a>
  <dd>
  Script management in Proof General can work across many script
  files.  When a script is visited in the editor, it is locked
  (coloured) to reflect whether the proof assistant has loaded it in
  this session.  When a file is unlocked, all of the files which
  depend on it are automatically unlocked too.
  <p> 
  Dependencies between script files are either communicated from the
  proof assistant to Proof General, or maintained automatically by
  Proof General (based on the order in which files were processed).
  </p>
  </dd>
  <a name="pbp"><?php dt("Proof by Pointing.") ?></a>
  <dd>
  <em>Proof by pointing</em> allows you to click on a subterm of
  a goal to be proved, and apply an appropriate rule or 
  tactic automatically.  
  <p>
  Proof by pointing uses the interface to highlight subterms under the
  mouse, and sends messages asking the prover for hints to proceed.
  Proof General also uses the subterm structure to make it easy to cut
  and paste from complicated terms.
  </p>
  <?php footnote("Proof by pointing for Proof General is only supported by LEGO (experimentally) at the moment.  For others, we need help from each proof assistant implementor to add support for their system.")  ?>
  </dd>
  <a name="toolbar"><?php dt("Toolbar and menus") ?></a>
  <dd>
  Proof General has a toolbar with buttons for examining
  the proof state, starting a proof, manoeuvring in the proof script, 
  restarting the prover, saving a proof, searching for a theorem,
  issuing a command, interrupting the assistant, and getting help.
  <p>
  Using the toolbar, you can replay proofs without knowing any 
  low-level commands of the proof assistant or any Emacs hot-keys! 
  <p>
  Additionally, the toolbar commands and many more besides are
  available on menus; you don't need to know magical key presses for
  any features.
  </p>
  <?php footnote("Toolbar is available in XEmacs only") ?>
  </dd>
  <a name="fontlock"><?php dt("Syntax highlighting.") ?></a>
  <dd>
  Syntax highlighting is an editing feature which decorates a file
  with different colours or fonts according to the syntax of some
  language (usually a programming language). 
  <p>
  Proof General decorates proof scripts: proof commands are
  highlighted and different fonts may be used for definitions and
  assumptions, for example.
  </p>
  </dd>
  <a name="xsymbol"><?php dt("Real symbols.") ?></a>
  <dd>
  Proof General has a close integration with the
  powerful 
  <a href="http://www.fmi.uni-passau.de/~wedler/x-symbol">X-Symbol</a>
  package, which makes it easy to transparently use real symbols and
  Greek letters in your proofs.  
  <br> Instead of seeing "not P", you see "&not; </dd>P", instead
    of "a * b", you see "a &times; b", etc. <br>
   [the examples above are simple so they will work on most browsers 
    without needing images]
  <p>
  <?php footnote("X-Symbol currently works in XEmacs only") ?>
  </dd>
  <a name="funcmenu"><?php dt("Definitions Menu.") ?></a>
  <dd>
  A pull-down menu gives easy
  access to definitions, declarations and proofs in the current
  buffer.  
<!-- it is in FSF Emacs if you download func-menu.el from somewhere -->
<!--   <?php footnote("Definitions menu is available in XEmacs only") ?> -->
  </dd>
  <?php dt("Remote proof assistant.") ?>
  <dd>
  Sometimes you may want to run a proof assistant on a powerful remote
  machine.  Proof General can communicate with a proof assistant running
  remotely, while your files and editor reside on your local machine.
  <p></p>
  </dd>
  <a name="tags"><?php dt("Tags.") ?></a>
  <dd>
  Tags are an editing feature which allow you to quickly locate the
  definition or declaration of a particular identifier.  Proof General
  is supplied with utilities to make tag indexes for Emacs, for the
  proof assistants LEGO and Coq.  This makes it easy to quickly access
  definitions from a standard library, for example, and in large proof
  developments split across multiple files.
<!--   <?php footnote("Tags programs are provided for LEGO and Coq") ?> -->
  <p></p>
  </dd>
  <a name="generic"><?php dt("Adaptability.") ?></a>
  <dd>
  Proof General is designed to be adaptable.  Many aspects
  of its behaviour can be easily customized (using dialogue boxes and
  buttons, no text file editing!).   
  <p>
  Most importantly, Proof General is generic, so you can adapt it to 
  a new proof assistant with surprisingly little effort.
  <p>
  Adapting for a new proof assistant is mainly a matter of setting
  some variables with regular expressions to help parse output from
  the prover, and setting other variables with commands to send to the
  prover.  See this basic
 <?php fileshow("ProofGeneral/demoisa/demoisa-easy.el", 
	  "example instance"); ?>.
  To get the most from Proof General (proof by pointing, for
  example), it may be necessary to put some hooks in
  the output routines of the proof assistant.  
  </p>
  Please feel free to download Proof General to customize it for a new
  system, and 
  <?php hlink("feedback.phtml","tell us ","Feedback form")?>
  how you get on.
  </dd>
</dl>
<p>
For (even) more details of the above features, see the 
<?php link_root("doc","documentation page.") ?>
</p>

